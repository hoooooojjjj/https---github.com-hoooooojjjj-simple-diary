[{"/Users/ryuhojun/Documents/simple-diary/src/index.js":"1","/Users/ryuhojun/Documents/simple-diary/src/App.js":"2","/Users/ryuhojun/Documents/simple-diary/src/DiaryEdtor.js":"3","/Users/ryuhojun/Documents/simple-diary/src/DiaryList.js":"4","/Users/ryuhojun/Documents/simple-diary/src/DiaryItem.js":"5","/Users/ryuhojun/Documents/simple-diary/src/Lifecycle.js":"6"},{"size":418,"mtime":1692203918177,"results":"7","hashOfConfig":"8"},{"size":3609,"mtime":1692518923708,"results":"9","hashOfConfig":"8"},{"size":2165,"mtime":1691992060245,"results":"10","hashOfConfig":"8"},{"size":821,"mtime":1692004944844,"results":"11","hashOfConfig":"8"},{"size":2305,"mtime":1692005589148,"results":"12","hashOfConfig":"8"},{"size":2218,"mtime":1692342867480,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gte6v",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ryuhojun/Documents/simple-diary/src/index.js",[],[],"/Users/ryuhojun/Documents/simple-diary/src/App.js",["34"],[],"import \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n// import Lifecycle from \"./Lifecycle\";\n\nfunction App() {\n  const [diaryDatas, setdiaryDatas] = useState([]);\n\n  const dataId = useRef(0);\n\n  // API를 호출하는 getdata 함수\n  const getdata = async () => {\n    const res = await fetch(\n      // 비동기 함수 fetch()로 API 받아오기\n      \"https://jsonplaceholder.typicode.com/comments\"\n    )\n      .then((res) => {\n        return res.json(); // API 데이터를 json 형태로 변환\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    // 초기 일기 데이터 세팅\n    const ininData = res.slice(0, 20).map((item) => {\n      // 초기 데이터 배열\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    setdiaryDatas(ininData); // 초기 데이터 배열을 diaryDatas에 할당\n  };\n\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n\n    // 새로 들어갈 배열 요소\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: Date.now(),\n    };\n    // diaryDatasId.current += 1;\n    setdiaryDatas([newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  };\n\n  // 배열 삭제\n  const onRemove = (targetId) => {\n    const deleteData = diaryDatas.filter((data) => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas(deleteData);\n  };\n\n  // 배열 수정\n  const onEdit = (targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map((data) => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas(editdiaryDatas);\n  };\n\n  // useMemo() -> 연산 최적화 = 필요할 때만 연산을 수행하도록 해줌\n  // 감정 비율 분석 -> useMemo 사용 -> 이것은 더 이상 함수가 아님. -> usememo가 리턴하는 값을 그대로 받음.\n  const emotionAnalysis = useMemo(() => {\n    // 첫번째 인자로 콜백함수 -> 콜백함수의 연산을 최적화해줌 -> 콜백함수의 리턴값을 그대로 반환\n    const goodCount = diaryDatas.filter((it) => it.emotion >= 3).length;\n    const sadCount = diaryDatas.length - goodCount;\n    const goodRatio = (goodCount / diaryDatas.length) * 100;\n    return { goodCount, sadCount, goodRatio }; // 리턴 값이 존재해야함\n  }, [diaryDatas.length]); // 두번째 인자로 이 값이 바뀔 때만 콜백함수를 실행시킬 값\n\n  const { goodCount, sadCount, goodRatio } = emotionAnalysis; // 값으로 사용해야함.\n  return (\n    <div className=\"App\">\n      {/* <Lifecycle /> */}\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체 일기 개수 : {diaryDatas.length}</div>\n      <div>기분 좋은 일기 개수 : {goodCount}</div>\n      <div>기분 나쁜 일기 개수 : {sadCount}</div>\n      <div>기분 좋은 일기 비율 : {goodRatio}%</div>\n      <DiaryList diaryData={diaryDatas} onRemove={onRemove} onEdit={onEdit} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ryuhojun/Documents/simple-diary/src/DiaryEdtor.js",[],[],"/Users/ryuhojun/Documents/simple-diary/src/DiaryList.js",[],[],"/Users/ryuhojun/Documents/simple-diary/src/DiaryItem.js",[],[],[],"/Users/ryuhojun/Documents/simple-diary/src/Lifecycle.js",[],[],{"ruleId":"35","severity":1,"message":"36","line":89,"column":6,"nodeType":"37","endLine":89,"endColumn":25,"suggestions":"38"},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'diaryDatas'. Either include it or remove the dependency array.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: [diaryDatas]",{"range":"42","text":"43"},[2443,2462],"[diaryDatas]"]