{"ast":null,"code":"var _jsxFileName = \"/Users/ryuhojun/Documents/simple-diary/src/OptimizeTest.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// React.memo를 사용하면 컴포넌트가 받는 props만 바뀔 때 컴포넌트가 렌더링되어 성능 최적화!\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextView = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(({\n  text\n}) => {\n  _s();\n  useEffect(() => {\n    console.log(`update :: Text : ${text}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = TextView;\nconst CountView = /*#__PURE__*/_s2( /*#__PURE__*/React.memo(_c3 = _s2(({\n  count\n}) => {\n  _s2();\n  useEffect(() => {\n    console.log(`update :: Count : ${count}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c4 = CountView;\nconst OptimizeTest = () => {\n  _s3();\n  const [count, setcount] = useState(0);\n  const [text, settext] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 50\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CountView, {\n        count: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setcount(count + 1);\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextView, {\n          text: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            settext(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s3(OptimizeTest, \"NeoJedUgb6zT6xlLkzuJXsXoiqs=\");\n_c5 = OptimizeTest;\nexport default OptimizeTest;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"TextView$React.memo\");\n$RefreshReg$(_c2, \"TextView\");\n$RefreshReg$(_c3, \"CountView$React.memo\");\n$RefreshReg$(_c4, \"CountView\");\n$RefreshReg$(_c5, \"OptimizeTest\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TextView","_s","memo","_c","text","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","CountView","_s2","_c3","count","_c4","OptimizeTest","_s3","setcount","settext","style","padding","onClick","onChange","e","target","value","_c5","$RefreshReg$"],"sources":["/Users/ryuhojun/Documents/simple-diary/src/OptimizeTest.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// React.memo를 사용하면 컴포넌트가 받는 props만 바뀔 때 컴포넌트가 렌더링되어 성능 최적화!\nconst TextView = React.memo(({ text }) => {\n  useEffect(() => {\n    console.log(`update :: Text : ${text}`);\n  });\n  return <div>{text}</div>;\n});\n\nconst CountView = React.memo(({ count }) => {\n  useEffect(() => {\n    console.log(`update :: Count : ${count}`);\n  });\n  return <div>{count}</div>;\n});\n\nconst OptimizeTest = () => {\n  const [count, setcount] = useState(0);\n  const [text, settext] = useState(\"\");\n  return (\n    <div style={{ padding: 50 }}>\n      <div>\n        <h2>count</h2>\n        <CountView count={count} />\n        <button\n          onClick={() => {\n            setcount(count + 1);\n          }}\n        >\n          +\n        </button>\n        <div>\n          <h2>text</h2>\n          <TextView text={text} />\n          <input\n            onChange={(e) => {\n              settext(e.target.value);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OptimizeTest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}