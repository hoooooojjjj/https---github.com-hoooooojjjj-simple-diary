{"ast":null,"code":"var _jsxFileName = \"/Users/ryuhojun/Documents/simple-diary/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef } from \"react\";\n// import OptimizeTest from \"./OptimizeTest\";\n// import Lifecycle from \"./Lifecycle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reducer = (state, action) => {\n  // state와 action 객체를 인자로 받음\n  switch (action.type) {\n    case \"INIT\":\n      {\n        // 컴포넌트 안에 있던 상태관리 로직을 그대로 넣음\n        // 변경할 state값을 리턴함, 즉 setdate(이 안에 들어갔던 것을 리턴함)\n        return action.data;\n      }\n    case \"CREATE\":\n      {\n        const created_date = new Date().getTime();\n        const newItem = {\n          ...action.data,\n          created_date\n        };\n        return [newItem, ...state];\n      }\n    case \"REMOVE\":\n      {\n        return state.filter(data => data.id !== action.targetId);\n      }\n    case \"EDIT\":\n      {\n        return state.map(data => {\n          if (data.id === action.targetId) {\n            data.content = action.editContent;\n          }\n          return data;\n        });\n      }\n    default:\n      return state;\n  }\n};\n// Context를 사용하여 하나의 기능을 하는 컴포넌트들을 묶어서 데이터를 공급해줄 수 있다.\n// 이를 통해 ComponentDrilling을 해결할 수 있다.\n// Provider 컴포넌트에 value로 공급해줄 데이터를 보내고 이를 자식 컴포넌트가 받는다.\nexport const DiaryStateContext = /*#__PURE__*/React.createContext(); // Context를 생성하고 export한다.\nexport const DiaryDispatchContext = /*#__PURE__*/React.createContext(); // 상태관리 로직은 분리해서 전달해야한다.\n\nfunction App() {\n  _s();\n  // const [diaryDatas, setdiaryDatas] = useState([]);\n\n  // useReducer를 사용하여 복잡한 상태 관리(업데이트) 로직 분리하기\n  // -> \"상태변화함수를 사용하는 로직\"이 많아지면 컴포넌트가 복잡하고 길어지기 때문에 이를 컴포넌트 밖으로 분리하는 방법\n  const [diaryDatas, dispatch] = useReducer(reducer, []);\n  // [state,상태변화함수(객체를 받음)] = useRudcer(상태를 변화시키는 함수(dispatch를 통해 데이터를 받음), 초깃값)\n\n  const dataId = useRef(0);\n\n  // API를 호출하는 getdata 함수\n  const getdata = async () => {\n    const res = await fetch(\n    // 비동기 함수 fetch()로 API 받아오기\n    \"https://jsonplaceholder.typicode.com/comments\").then(res => {\n      return res.json(); // API 데이터를 json 형태로 변환\n    }).catch(err => {\n      console.log(err);\n    });\n\n    // 초기 일기 데이터 세팅\n    const ininData = res.slice(0, 20).map(item => {\n      // 초기 데이터 배열\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    // action객체를 dispatch함수에 전달\n    // action 객체는 type과 로직을 그대로 옮길 때 필요한 인자 비슷한 것을 객체로 넘김\n    // 그 다음 reducer 함수에 그대로 로직을 전달\n    dispatch({\n      type: \"INIT\",\n      data: ininData\n    });\n    // setdiaryDatas(ininData); // 초기 데이터 배열을 diaryDatas에 할당\n  };\n\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  // useCallback -> 자식 컴포넌트로 넘어가는 함수 props가 변하지 않으면 현재 컴포넌트가 리렌더링 되더라도 새로 만들어지지 않게\n  // 이때는 \"함수형 업데이트\"를 사용해야함. 의존성 배열에 빈 배열을 전달하고 함수형 업데이트를 통해 현재 state를 전달해줘야함\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: {\n        author,\n        content,\n        emotion,\n        id: Date.now()\n      }\n    });\n    // const created_date = new Date().getTime();\n\n    // // 새로 들어갈 배열 요소\n    // const newItem = {\n    //   author,\n    //   content,\n    //   emotion,\n    //   created_date,\n    //   id: Date.now(),\n    // };\n    // diaryDatasId.current += 1;\n    // setdiaryDatas((diaryDatas) => [newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  }, []);\n\n  // 배열 삭제\n  const onRemove = useCallback(targetId => {\n    dispatch({\n      type: \"REMOVE\",\n      targetId\n    });\n    // setdiaryDatas((diaryDatas) =>\n    //   diaryDatas.filter((data) => data.id !== targetId)\n    // );\n  }, []);\n\n  // 배열 수정\n  const onEdit = useCallback((targetId, editContent) => {\n    dispatch({\n      type: \"EDIT\",\n      targetId,\n      editContent\n    });\n    // setdiaryDatas((diaryDatas) => {\n    //   return diaryDatas.map((data) => {\n    //     if (data.id === targetId) {\n    //       data.content = editContent;\n    //     }\n    //     return data;\n    //   });\n    // });\n  }, []);\n  const MemoizedDispatches = useMemo(() => {\n    return {\n      onCreate,\n      onRemove,\n      onEdit\n    };\n  }, []);\n\n  // useMemo() -> 연산 최적화 = 필요할 때만 연산을 수행하도록 해줌\n  // 감정 비율 분석 -> useMemo 사용 -> 이것은 더 이상 함수가 아님. -> usememo가 리턴하는 값을 그대로 받음.\n  const emotionAnalysis = useMemo(() => {\n    // 첫번째 인자로 콜백함수 -> 콜백함수의 연산을 최적화해줌 -> 콜백함수의 리턴값을 그대로 반환\n    const goodCount = diaryDatas.filter(it => it.emotion >= 3).length;\n    const sadCount = diaryDatas.length - goodCount;\n    const goodRatio = goodCount / diaryDatas.length * 100;\n    return {\n      goodCount,\n      sadCount,\n      goodRatio\n    }; // 리턴 값이 존재해야함\n  }, [diaryDatas.length]); // 두번째 인자로 이 값이 바뀔 때만 콜백함수를 실행시킬 값\n\n  const {\n    goodCount,\n    sadCount,\n    goodRatio\n  } = emotionAnalysis; // 값으로 사용해야함.\n  return /*#__PURE__*/_jsxDEV(DiaryStateContext.Provider, {\n    value: diaryDatas,\n    children: /*#__PURE__*/_jsxDEV(DiaryDispatchContext.Provider, {\n      value: MemoizedDispatches,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\uC804\\uCCB4 \\uC77C\\uAE30 \\uAC1C\\uC218 : \", diaryDatas.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uAC1C\\uC218 : \", goodCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\uAE30\\uBD84 \\uB098\\uC05C \\uC77C\\uAE30 \\uAC1C\\uC218 : \", sadCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uBE44\\uC728 : \", goodRatio, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DiaryList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EVCUvbf4HdVRF51hp/+DAsrM4fE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","React","useCallback","useEffect","useMemo","useReducer","useRef","jsxDEV","_jsxDEV","reducer","state","action","type","data","created_date","Date","getTime","newItem","filter","id","targetId","map","content","editContent","DiaryStateContext","createContext","DiaryDispatchContext","App","_s","diaryDatas","dispatch","dataId","getdata","res","fetch","then","json","catch","err","console","log","ininData","slice","item","author","email","body","emotion","Math","floor","random","current","onCreate","now","onRemove","onEdit","MemoizedDispatches","emotionAnalysis","goodCount","it","length","sadCount","goodRatio","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryuhojun/Documents/simple-diary/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from \"react\";\n// import OptimizeTest from \"./OptimizeTest\";\n// import Lifecycle from \"./Lifecycle\";\n\nconst reducer = (state, action) => {\n  // state와 action 객체를 인자로 받음\n  switch (action.type) {\n    case \"INIT\": {\n      // 컴포넌트 안에 있던 상태관리 로직을 그대로 넣음\n      // 변경할 state값을 리턴함, 즉 setdate(이 안에 들어갔던 것을 리턴함)\n      return action.data;\n    }\n    case \"CREATE\": {\n      const created_date = new Date().getTime();\n      const newItem = {\n        ...action.data,\n        created_date,\n      };\n      return [newItem, ...state];\n    }\n    case \"REMOVE\": {\n      return state.filter((data) => data.id !== action.targetId);\n    }\n    case \"EDIT\": {\n      return state.map((data) => {\n        if (data.id === action.targetId) {\n          data.content = action.editContent;\n        }\n        return data;\n      });\n    }\n    default:\n      return state;\n  }\n};\n// Context를 사용하여 하나의 기능을 하는 컴포넌트들을 묶어서 데이터를 공급해줄 수 있다.\n// 이를 통해 ComponentDrilling을 해결할 수 있다.\n// Provider 컴포넌트에 value로 공급해줄 데이터를 보내고 이를 자식 컴포넌트가 받는다.\nexport const DiaryStateContext = React.createContext(); // Context를 생성하고 export한다.\nexport const DiaryDispatchContext = React.createContext(); // 상태관리 로직은 분리해서 전달해야한다.\n\nfunction App() {\n  // const [diaryDatas, setdiaryDatas] = useState([]);\n\n  // useReducer를 사용하여 복잡한 상태 관리(업데이트) 로직 분리하기\n  // -> \"상태변화함수를 사용하는 로직\"이 많아지면 컴포넌트가 복잡하고 길어지기 때문에 이를 컴포넌트 밖으로 분리하는 방법\n  const [diaryDatas, dispatch] = useReducer(reducer, []);\n  // [state,상태변화함수(객체를 받음)] = useRudcer(상태를 변화시키는 함수(dispatch를 통해 데이터를 받음), 초깃값)\n\n  const dataId = useRef(0);\n\n  // API를 호출하는 getdata 함수\n  const getdata = async () => {\n    const res = await fetch(\n      // 비동기 함수 fetch()로 API 받아오기\n      \"https://jsonplaceholder.typicode.com/comments\"\n    )\n      .then((res) => {\n        return res.json(); // API 데이터를 json 형태로 변환\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    // 초기 일기 데이터 세팅\n    const ininData = res.slice(0, 20).map((item) => {\n      // 초기 데이터 배열\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    // action객체를 dispatch함수에 전달\n    // action 객체는 type과 로직을 그대로 옮길 때 필요한 인자 비슷한 것을 객체로 넘김\n    // 그 다음 reducer 함수에 그대로 로직을 전달\n    dispatch({ type: \"INIT\", data: ininData });\n    // setdiaryDatas(ininData); // 초기 데이터 배열을 diaryDatas에 할당\n  };\n\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  // useCallback -> 자식 컴포넌트로 넘어가는 함수 props가 변하지 않으면 현재 컴포넌트가 리렌더링 되더라도 새로 만들어지지 않게\n  // 이때는 \"함수형 업데이트\"를 사용해야함. 의존성 배열에 빈 배열을 전달하고 함수형 업데이트를 통해 현재 state를 전달해줘야함\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: { author, content, emotion, id: Date.now() },\n    });\n    // const created_date = new Date().getTime();\n\n    // // 새로 들어갈 배열 요소\n    // const newItem = {\n    //   author,\n    //   content,\n    //   emotion,\n    //   created_date,\n    //   id: Date.now(),\n    // };\n    // diaryDatasId.current += 1;\n    // setdiaryDatas((diaryDatas) => [newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  }, []);\n\n  // 배열 삭제\n  const onRemove = useCallback((targetId) => {\n    dispatch({ type: \"REMOVE\", targetId });\n    // setdiaryDatas((diaryDatas) =>\n    //   diaryDatas.filter((data) => data.id !== targetId)\n    // );\n  }, []);\n\n  // 배열 수정\n  const onEdit = useCallback((targetId, editContent) => {\n    dispatch({ type: \"EDIT\", targetId, editContent });\n    // setdiaryDatas((diaryDatas) => {\n    //   return diaryDatas.map((data) => {\n    //     if (data.id === targetId) {\n    //       data.content = editContent;\n    //     }\n    //     return data;\n    //   });\n    // });\n  }, []);\n\n  const MemoizedDispatches = useMemo(() => {\n    return { onCreate, onRemove, onEdit };\n  }, []);\n\n  // useMemo() -> 연산 최적화 = 필요할 때만 연산을 수행하도록 해줌\n  // 감정 비율 분석 -> useMemo 사용 -> 이것은 더 이상 함수가 아님. -> usememo가 리턴하는 값을 그대로 받음.\n  const emotionAnalysis = useMemo(() => {\n    // 첫번째 인자로 콜백함수 -> 콜백함수의 연산을 최적화해줌 -> 콜백함수의 리턴값을 그대로 반환\n    const goodCount = diaryDatas.filter((it) => it.emotion >= 3).length;\n    const sadCount = diaryDatas.length - goodCount;\n    const goodRatio = (goodCount / diaryDatas.length) * 100;\n    return { goodCount, sadCount, goodRatio }; // 리턴 값이 존재해야함\n  }, [diaryDatas.length]); // 두번째 인자로 이 값이 바뀔 때만 콜백함수를 실행시킬 값\n\n  const { goodCount, sadCount, goodRatio } = emotionAnalysis; // 값으로 사용해야함.\n  return (\n    <DiaryStateContext.Provider value={diaryDatas}>\n      <DiaryDispatchContext.Provider value={MemoizedDispatches}>\n        <div className=\"App\">\n          {/* <Lifecycle /> */}\n          {/* <OptimizeTest /> */}\n          <DiaryEditor />\n          <div>전체 일기 개수 : {diaryDatas.length}</div>\n          <div>기분 좋은 일기 개수 : {goodCount}</div>\n          <div>기분 나쁜 일기 개수 : {sadCount}</div>\n          <div>기분 좋은 일기 비율 : {goodRatio}%</div>\n          <DiaryList />\n        </div>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}