{"ast":null,"code":"var _jsxFileName = \"/Users/ryuhojun/Documents/simple-diary/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [diaryDatas, setdiaryDatas] = useState([]);\n  const diaryDatasId = useRef(0);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      // 새로 들어갈 배열 요소\n      author,\n      content,\n      emotion,\n      created_date,\n      id: diaryDatasId.current\n    };\n    diaryDatasId.current += 1;\n    setdiaryDatas([newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  };\n\n  // 배열 삭제\n  const onRemove = targetId => {\n    const deleteData = diaryDatas.filter(data => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas(deleteData);\n  };\n\n  // 배열 수정\n  const onEdit = (targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map(data => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas(editdiaryDatas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryData: diaryDatas,\n      onRemove: onRemove,\n      onEdit: onEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DMmZuVz3ArHWs1pzVaOhtvTjTD0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","useRef","useState","jsxDEV","_jsxDEV","App","_s","diaryDatas","setdiaryDatas","diaryDatasId","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","onRemove","targetId","deleteData","filter","data","onEdit","editContent","editdiaryDatas","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryData","_c","$RefreshReg$"],"sources":["/Users/ryuhojun/Documents/simple-diary/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useRef, useState } from \"react\";\nfunction App() {\n  const [diaryDatas, setdiaryDatas] = useState([]);\n\n  const diaryDatasId = useRef(0);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      // 새로 들어갈 배열 요소\n      author,\n      content,\n      emotion,\n      created_date,\n      id: diaryDatasId.current,\n    };\n    diaryDatasId.current += 1;\n    setdiaryDatas([newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  };\n\n  // 배열 삭제\n  const onRemove = (targetId) => {\n    const deleteData = diaryDatas.filter((data) => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas(deleteData);\n  };\n\n  // 배열 수정\n  const onEdit = (targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map((data) => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas(editdiaryDatas);\n  };\n  return (\n    <div className=\"App\">\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList diaryData={diaryDatas} onRemove={onRemove} onEdit={onEdit} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,WAAW,MAAM,cAAc;AACtC,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMO,YAAY,GAAGR,MAAM,CAAC,CAAC,CAAC;;EAE9B;EACA;;EAEA;EACA,MAAMS,QAAQ,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7C,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACzC,MAAMC,OAAO,GAAG;MACd;MACAN,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,YAAY;MACZI,EAAE,EAAET,YAAY,CAACU;IACnB,CAAC;IACDV,YAAY,CAACU,OAAO,IAAI,CAAC;IACzBX,aAAa,CAAC,CAACS,OAAO,EAAE,GAAGV,UAAU,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;;EAED;EACA,MAAMa,QAAQ,GAAIC,QAAQ,IAAK;IAC7B,MAAMC,UAAU,GAAGf,UAAU,CAACgB,MAAM,CAAEC,IAAI,IAAK;MAC7C,OAAOA,IAAI,CAACN,EAAE,KAAKG,QAAQ;IAC7B,CAAC,CAAC;IACFb,aAAa,CAACc,UAAU,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAACJ,QAAQ,EAAEK,WAAW,KAAK;IACxC,MAAMC,cAAc,GAAGpB,UAAU,CAACqB,GAAG,CAAEJ,IAAI,IAAK;MAC9C,IAAIA,IAAI,CAACN,EAAE,KAAKG,QAAQ,EAAE;QACxBG,IAAI,CAACZ,OAAO,GAAGc,WAAW;MAC5B;MACA,OAAOF,IAAI;IACb,CAAC,CAAC;IACFhB,aAAa,CAACmB,cAAc,CAAC;EAC/B,CAAC;EACD,oBACEvB,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA,CAACL,WAAW;MAACW,QAAQ,EAAEA;IAAS;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnC9B,OAAA,CAACJ,SAAS;MAACmC,SAAS,EAAE5B,UAAW;MAACa,QAAQ,EAAEA,QAAS;MAACK,MAAM,EAAEA;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV;AAAC5B,EAAA,CA/CQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}