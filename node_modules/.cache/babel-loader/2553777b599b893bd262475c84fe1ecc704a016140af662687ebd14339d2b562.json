{"ast":null,"code":"var _jsxFileName = \"/Users/ryuhojun/Documents/simple-diary/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n// import OptimizeTest from \"./OptimizeTest\";\n// import Lifecycle from \"./Lifecycle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [diaryDatas, setdiaryDatas] = useState([]);\n  const dataId = useRef(0);\n\n  // API를 호출하는 getdata 함수\n  const getdata = async () => {\n    const res = await fetch(\n    // 비동기 함수 fetch()로 API 받아오기\n    \"https://jsonplaceholder.typicode.com/comments\").then(res => {\n      return res.json(); // API 데이터를 json 형태로 변환\n    }).catch(err => {\n      console.log(err);\n    });\n\n    // 초기 일기 데이터 세팅\n    const ininData = res.slice(0, 20).map(item => {\n      // 초기 데이터 배열\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    setdiaryDatas(ininData); // 초기 데이터 배열을 diaryDatas에 할당\n  };\n\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  // useCallback -> 자식 컴포넌트로 넘어가는 함수 props가 변하지 않으면 현재 컴포넌트가 리렌더링 되더라도 새로 만들어지지 않게\n  // 이때는 \"함수형 업데이트\"를 사용해야함. 의존성 배열에 빈 배열을 전달하고 함수형 업데이트를 통해 현재 state를 전달해줘야함\n  const onCreate = useCallback((author, content, emotion) => {\n    const created_date = new Date().getTime();\n\n    // 새로 들어갈 배열 요소\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: Date.now()\n    };\n    // diaryDatasId.current += 1;\n    setdiaryDatas(diaryDatas => [newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  }, []);\n\n  // 배열 삭제\n  const onRemove = useCallback(targetId => {\n    const deleteData = diaryDatas.filter(data => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas(deleteData => deleteData);\n  }, []);\n\n  // 배열 수정\n  const onEdit = useCallback((targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map(data => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas(editdiaryDatas => editdiaryDatas);\n  }, []);\n\n  // useMemo() -> 연산 최적화 = 필요할 때만 연산을 수행하도록 해줌\n  // 감정 비율 분석 -> useMemo 사용 -> 이것은 더 이상 함수가 아님. -> usememo가 리턴하는 값을 그대로 받음.\n  const emotionAnalysis = useMemo(() => {\n    // 첫번째 인자로 콜백함수 -> 콜백함수의 연산을 최적화해줌 -> 콜백함수의 리턴값을 그대로 반환\n    const goodCount = diaryDatas.filter(it => it.emotion >= 3).length;\n    const sadCount = diaryDatas.length - goodCount;\n    const goodRatio = goodCount / diaryDatas.length * 100;\n    return {\n      goodCount,\n      sadCount,\n      goodRatio\n    }; // 리턴 값이 존재해야함\n  }, [diaryDatas.length]); // 두번째 인자로 이 값이 바뀔 때만 콜백함수를 실행시킬 값\n\n  const {\n    goodCount,\n    sadCount,\n    goodRatio\n  } = emotionAnalysis; // 값으로 사용해야함.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uC804\\uCCB4 \\uC77C\\uAE30 \\uAC1C\\uC218 : \", diaryDatas.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uAC1C\\uC218 : \", goodCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uB098\\uC05C \\uC77C\\uAE30 \\uAC1C\\uC218 : \", sadCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uBE44\\uC728 : \", goodRatio, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryData: diaryDatas,\n      onRemove: onRemove,\n      onEdit: onEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DEu+FO0K7TBgIUQaDizXgKbIk9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","useCallback","useEffect","useMemo","useRef","useState","jsxDEV","_jsxDEV","App","_s","diaryDatas","setdiaryDatas","dataId","getdata","res","fetch","then","json","catch","err","console","log","ininData","slice","map","item","author","email","content","body","emotion","Math","floor","random","created_date","Date","getTime","id","current","onCreate","newItem","now","onRemove","targetId","deleteData","filter","data","onEdit","editContent","editdiaryDatas","emotionAnalysis","goodCount","it","length","sadCount","goodRatio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryData","_c","$RefreshReg$"],"sources":["/Users/ryuhojun/Documents/simple-diary/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n// import OptimizeTest from \"./OptimizeTest\";\n// import Lifecycle from \"./Lifecycle\";\n\nfunction App() {\n  const [diaryDatas, setdiaryDatas] = useState([]);\n\n  const dataId = useRef(0);\n\n  // API를 호출하는 getdata 함수\n  const getdata = async () => {\n    const res = await fetch(\n      // 비동기 함수 fetch()로 API 받아오기\n      \"https://jsonplaceholder.typicode.com/comments\"\n    )\n      .then((res) => {\n        return res.json(); // API 데이터를 json 형태로 변환\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    // 초기 일기 데이터 세팅\n    const ininData = res.slice(0, 20).map((item) => {\n      // 초기 데이터 배열\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    setdiaryDatas(ininData); // 초기 데이터 배열을 diaryDatas에 할당\n  };\n\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  // useCallback -> 자식 컴포넌트로 넘어가는 함수 props가 변하지 않으면 현재 컴포넌트가 리렌더링 되더라도 새로 만들어지지 않게\n  // 이때는 \"함수형 업데이트\"를 사용해야함. 의존성 배열에 빈 배열을 전달하고 함수형 업데이트를 통해 현재 state를 전달해줘야함\n  const onCreate = useCallback((author, content, emotion) => {\n    const created_date = new Date().getTime();\n\n    // 새로 들어갈 배열 요소\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: Date.now(),\n    };\n    // diaryDatasId.current += 1;\n    setdiaryDatas((diaryDatas) => [newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  }, []);\n\n  // 배열 삭제\n  const onRemove = useCallback((targetId) => {\n    const deleteData = diaryDatas.filter((data) => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas((deleteData) => deleteData);\n  }, []);\n\n  // 배열 수정\n  const onEdit = useCallback((targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map((data) => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas((editdiaryDatas) => editdiaryDatas);\n  }, []);\n\n  // useMemo() -> 연산 최적화 = 필요할 때만 연산을 수행하도록 해줌\n  // 감정 비율 분석 -> useMemo 사용 -> 이것은 더 이상 함수가 아님. -> usememo가 리턴하는 값을 그대로 받음.\n  const emotionAnalysis = useMemo(() => {\n    // 첫번째 인자로 콜백함수 -> 콜백함수의 연산을 최적화해줌 -> 콜백함수의 리턴값을 그대로 반환\n    const goodCount = diaryDatas.filter((it) => it.emotion >= 3).length;\n    const sadCount = diaryDatas.length - goodCount;\n    const goodRatio = (goodCount / diaryDatas.length) * 100;\n    return { goodCount, sadCount, goodRatio }; // 리턴 값이 존재해야함\n  }, [diaryDatas.length]); // 두번째 인자로 이 값이 바뀔 때만 콜백함수를 실행시킬 값\n\n  const { goodCount, sadCount, goodRatio } = emotionAnalysis; // 값으로 사용해야함.\n  return (\n    <div className=\"App\">\n      {/* <Lifecycle /> */}\n      {/* <OptimizeTest /> */}\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체 일기 개수 : {diaryDatas.length}</div>\n      <div>기분 좋은 일기 개수 : {goodCount}</div>\n      <div>기분 나쁜 일기 개수 : {sadCount}</div>\n      <div>기분 좋은 일기 비율 : {goodRatio}%</div>\n      <DiaryList diaryData={diaryDatas} onRemove={onRemove} onEdit={onEdit} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}