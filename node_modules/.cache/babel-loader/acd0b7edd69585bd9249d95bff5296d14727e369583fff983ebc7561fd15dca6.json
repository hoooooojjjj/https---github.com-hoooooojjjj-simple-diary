{"ast":null,"code":"var _jsxFileName = \"/Users/ryuhojun/Documents/simple-diary/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useEffect, useRef, useState } from \"react\";\n// import Lifecycle from \"./Lifecycle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [diaryDatas, setdiaryDatas] = useState([]);\n  const dataId = useRef(0);\n  const getdata = async () => {\n    // API를 호출하는 getdata 함수\n    const res = await fetch(\n    // 비동기 함수 fetch()로 API 받아오기\n    \"https://jsonplaceholder.typicode.com/comments\").then(res => {\n      return res.json(); // API 데이터를 json 형태로 변환\n    }).catch(err => {\n      console.log(err);\n    });\n    const ininData = res.slice(0, 20).map(item => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    setdiaryDatas(ininData);\n  };\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n\n    // 새로 들어갈 배열 요소\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: Date.now()\n    };\n    // diaryDatasId.current += 1;\n    setdiaryDatas([newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  };\n\n  // 배열 삭제\n  const onRemove = targetId => {\n    const deleteData = diaryDatas.filter(data => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas(deleteData);\n  };\n\n  // 배열 수정\n  const onEdit = (targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map(data => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas(editdiaryDatas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryData: diaryDatas,\n      onRemove: onRemove,\n      onEdit: onEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1B52uR87qVLzvfQmuJcHXvXR3yQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","useEffect","useRef","useState","jsxDEV","_jsxDEV","App","_s","diaryDatas","setdiaryDatas","dataId","getdata","res","fetch","then","json","catch","err","console","log","ininData","slice","map","item","author","email","content","body","emotion","Math","floor","random","created_date","Date","getTime","id","current","onCreate","newItem","now","onRemove","targetId","deleteData","filter","data","onEdit","editContent","editdiaryDatas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryData","_c","$RefreshReg$"],"sources":["/Users/ryuhojun/Documents/simple-diary/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport DiaryEditor from \"./DiaryEdtor\";\nimport DiaryList from \"./DiaryList\";\nimport { useEffect, useRef, useState } from \"react\";\n// import Lifecycle from \"./Lifecycle\";\n\nfunction App() {\n  const [diaryDatas, setdiaryDatas] = useState([]);\n\n  const dataId = useRef(0);\n\n  const getdata = async () => {\n    // API를 호출하는 getdata 함수\n    const res = await fetch(\n      // 비동기 함수 fetch()로 API 받아오기\n      \"https://jsonplaceholder.typicode.com/comments\"\n    )\n      .then((res) => {\n        return res.json(); // API 데이터를 json 형태로 변환\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    const ininData = res.slice(0, 20).map((item) => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    setdiaryDatas(ininData);\n  };\n\n  useEffect(() => {\n    getdata(); // getdata 함수 호출\n  }, []);\n\n  // state 끌어올리기 -> 최상위 컴포넌트에서 이벤트가 발생하면 실행될 '함수'를 만들고 전달,\n  // 하위 컴포넌트에서 '이벤트'(->함수)를 현재 데이터를 인자로 전달하여 실행\n\n  // 배열 데이터 생성\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n\n    // 새로 들어갈 배열 요소\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: Date.now(),\n    };\n    // diaryDatasId.current += 1;\n    setdiaryDatas([newItem, ...diaryDatas]); // [새로 들어갈 배열 요소, ...기존 요소들]\n  };\n\n  // 배열 삭제\n  const onRemove = (targetId) => {\n    const deleteData = diaryDatas.filter((data) => {\n      return data.id !== targetId;\n    });\n    setdiaryDatas(deleteData);\n  };\n\n  // 배열 수정\n  const onEdit = (targetId, editContent) => {\n    const editdiaryDatas = diaryDatas.map((data) => {\n      if (data.id === targetId) {\n        data.content = editContent;\n      }\n      return data;\n    });\n    setdiaryDatas(editdiaryDatas);\n  };\n\n  return (\n    <div className=\"App\">\n      {/* <Lifecycle /> */}\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList diaryData={diaryDatas} onRemove={onRemove} onEdit={onEdit} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}