{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n\n// const Unmount = () => {\n//   // *** Lifecycle 컴포넌트가 언마운트됐을 때 -> 화면에서 사라졌을 때\n//   useEffect(() => {\n//     console.log(\"Mount!\");\n//     return () => {\n//       // 함수를 리턴하면 언마운트됐을 때 이 함수가 실행됨\n//       console.log(\"unmount!\");\n//     };\n//   }, []);\n//   return <div>unmount testing component</div>;\n// };\n\n// const Lifecycle = () => {\n//   //   const [count, setcount] = useState(0);\n//   //   const [text, settext] = useState(\"\");\n//   const [isvisible, setisvisible] = useState(false);\n//   const toggle = () => {\n//     setisvisible(!isvisible);\n//   };\n\n//   //   // *** Lifecycle 컴포넌트가 마운트됐을 때 -> 화면에 생겼을 때\n//   //   useEffect(() => {\n//   //     console.log(\"Mount!\");\n//   //   }, []); // 의존성 배열에 빈 배열을 전달하면 마운트됐을 때 함수 실행 가능\n\n//   //   // *** Lifecycle 컴포넌트가 업데이트됐을 때 -> 리렌더링 됐을 때\n//   //   useEffect(() => {\n//   //     console.log(\"Update!\");\n//   //   }); // 의존성 배열을 전달하지 않으면 업데이트 됐을 때 함수 실행 가능\n//   //   useEffect(() => {\n//   //     console.log(\"count Update!\");\n//   //   }, [count]); // 의존성 배열에 특정 상태를 넣으면 그 상태로 인해\n//   //   // 컴포넌트가 업데이트 됐을 때 함수 실행 가능\n//   //   useEffect(() => {\n//   //     console.log(\"text Update!\");\n//   //   }, [text]);\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       {/* {count}\n//       <button\n//         onClick={() => {\n//           setcount(count + 1);\n//         }}\n//       >\n//         +\n//       </button>\n//       <button\n//         onClick={() => {\n//           setcount(count - 1);\n//         }}\n//       >\n//         -\n//       </button>\n//       <div>\n//         <input\n//           value={text}\n//           onChange={(e) => {\n//             settext(e.target.value);\n//           }}\n//         />\n//       </div> */}\n\n//       <button onClick={toggle}>on/off</button>\n//       {isvisible && <Unmount />}\n//     </div>\n//   );\n// };\n\n// export default Lifecycle;","map":{"version":3,"names":[],"sources":["/Users/ryuhojun/Documents/simple-diary/src/Lifecycle.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n\n// const Unmount = () => {\n//   // *** Lifecycle 컴포넌트가 언마운트됐을 때 -> 화면에서 사라졌을 때\n//   useEffect(() => {\n//     console.log(\"Mount!\");\n//     return () => {\n//       // 함수를 리턴하면 언마운트됐을 때 이 함수가 실행됨\n//       console.log(\"unmount!\");\n//     };\n//   }, []);\n//   return <div>unmount testing component</div>;\n// };\n\n// const Lifecycle = () => {\n//   //   const [count, setcount] = useState(0);\n//   //   const [text, settext] = useState(\"\");\n//   const [isvisible, setisvisible] = useState(false);\n//   const toggle = () => {\n//     setisvisible(!isvisible);\n//   };\n\n//   //   // *** Lifecycle 컴포넌트가 마운트됐을 때 -> 화면에 생겼을 때\n//   //   useEffect(() => {\n//   //     console.log(\"Mount!\");\n//   //   }, []); // 의존성 배열에 빈 배열을 전달하면 마운트됐을 때 함수 실행 가능\n\n//   //   // *** Lifecycle 컴포넌트가 업데이트됐을 때 -> 리렌더링 됐을 때\n//   //   useEffect(() => {\n//   //     console.log(\"Update!\");\n//   //   }); // 의존성 배열을 전달하지 않으면 업데이트 됐을 때 함수 실행 가능\n//   //   useEffect(() => {\n//   //     console.log(\"count Update!\");\n//   //   }, [count]); // 의존성 배열에 특정 상태를 넣으면 그 상태로 인해\n//   //   // 컴포넌트가 업데이트 됐을 때 함수 실행 가능\n//   //   useEffect(() => {\n//   //     console.log(\"text Update!\");\n//   //   }, [text]);\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       {/* {count}\n//       <button\n//         onClick={() => {\n//           setcount(count + 1);\n//         }}\n//       >\n//         +\n//       </button>\n//       <button\n//         onClick={() => {\n//           setcount(count - 1);\n//         }}\n//       >\n//         -\n//       </button>\n//       <div>\n//         <input\n//           value={text}\n//           onChange={(e) => {\n//             settext(e.target.value);\n//           }}\n//         />\n//       </div> */}\n\n//       <button onClick={toggle}>on/off</button>\n//       {isvisible && <Unmount />}\n//     </div>\n//   );\n// };\n\n// export default Lifecycle;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}